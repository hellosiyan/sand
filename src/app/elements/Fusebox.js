import Drawable from '../lib/Drawable';
import Container from '../lib/Container';
import Pixmap from '../Pixmap';
import Rune from './Rune';
import game from '../Game';
import { config } from '../config';
import { inPixels } from '../utils';

const pixmaps = {
    stone: Pixmap.load(`
000000001111111111111100000000
000001111111111111111111100000
000111111111111111111111111000
011111111111111111111111111110
111111111111111111111111111111
111111111111111111111111111111
111111111111111111111111111111
111111111000000000000111111111
111111110000000000000011111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111100000000000000001111111
111111110000000000000011111111
111111111000000000000111111111
111111111111111111111111111111
111111111111111111111111111111
111111111111111111111111111111
011111111111111111111111111110
000111111111111111111111111000
000001111111111111111111100000
000000001111111111111100000000`, config.palettes.fusebox).toDrawable().cache(),
};

export default class Fusebox extends Container {
    constructor() {
        super();

        this.width = pixmaps.stone.width;
        this.height = pixmaps.stone.height;

        this.rune = new Rune();
        this.rune.y = inPixels(5);
        this.rune.letter = 'a';
        this.rune.alignWith(this).center();

        this.addChild(this.rune);
    }

    draw(ctx) {
        const drawable = pixmaps.stone;
        drawable.x = this.x;
        drawable.y = this.y;
        drawable.draw(ctx);

        super.draw(ctx);
    }
}
